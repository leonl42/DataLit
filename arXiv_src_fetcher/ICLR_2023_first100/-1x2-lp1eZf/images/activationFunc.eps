%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: activationFunc (1).pdf
%%Creator: Adobe Acrobat 15.7.0
%%For: e0023501
%%CreationDate: 21/12/2018, 1:24:46 PM
%%BoundingBox: 0 0 391 295
%%HiResBoundingBox: 0 0 390.3288 294.8702
%%CropBox: 0 0 390.3288 294.8702
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 561 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c015 81.157285, 2014/12/12-00:43:15        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2018-12-21T04:47:02Z"
   xmp:CreatorTool="Chromium"
   xmp:ModifyDate="2018-12-21T04:47:02Z"
   pdf:Producer="Skia/PDF m72"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -294.87 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 294.87 li
390.329 294.87 li
390.329 0 li
cp
clp
gsave
-153.3 -7.6853 mo
458.7 -7.6853 li
458.7 784.315 li
-153.3 784.315 li
cp
eclp
-153.3 -7.6853 mo
458.7 -7.6853 li
458.7 1576.31 li
-153.3 1576.31 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
-153.3 -7.6853 mo
458.7 -7.6853 li
458.7 784.315 li
-153.3 784.315 li
cp
f
grestore
2.16 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
48.6599 251.875 mo
48.6599 14.3467 li
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
1 sep
@
48.6599 9.4867 mo
51.8999 15.9667 li
48.6599 14.3467 li
45.4199 15.9667 li
48.6599 9.4867 li
cp
f
48.6599 9.4867 mo
51.8999 15.9667 li
48.6599 14.3467 li
45.4199 15.9667 li
48.6599 9.4867 li
cp
@
48.6599 49.1947 mo
55.1399 49.1947 li
55.1399 51.3547 li
48.6599 51.3547 li
61.6199 49.1947 mo
68.0999 49.1947 li
68.0999 51.3547 li
61.6199 51.3547 li
74.5799 49.1947 mo
81.0599 49.1947 li
81.0599 51.3547 li
74.5799 51.3547 li
87.5399 49.1947 mo
94.0199 49.1947 li
94.0199 51.3547 li
87.5399 51.3547 li
100.5 49.1947 mo
106.98 49.1947 li
106.98 51.3547 li
100.5 51.3547 li
113.46 49.1947 mo
119.94 49.1947 li
119.94 51.3547 li
113.46 51.3547 li
126.42 49.1947 mo
132.9 49.1947 li
132.9 51.3547 li
126.42 51.3547 li
139.38 49.1947 mo
145.86 49.1947 li
145.86 51.3547 li
139.38 51.3547 li
152.34 49.1947 mo
158.82 49.1947 li
158.82 51.3547 li
152.34 51.3547 li
165.3 49.1947 mo
171.78 49.1947 li
171.78 51.3547 li
165.3 51.3547 li
178.26 49.1947 mo
184.74 49.1947 li
184.74 51.3547 li
178.26 51.3547 li
191.22 49.1947 mo
197.7 49.1947 li
197.7 51.3547 li
191.22 51.3547 li
204.18 49.1947 mo
210.66 49.1947 li
210.66 51.3547 li
204.18 51.3547 li
217.14 49.1947 mo
223.62 49.1947 li
223.62 51.3547 li
217.14 51.3547 li
230.1 49.1947 mo
236.58 49.1947 li
236.58 51.3547 li
230.1 51.3547 li
243.06 49.1947 mo
249.54 49.1947 li
249.54 51.3547 li
243.06 51.3547 li
256.02 49.1947 mo
262.5 49.1947 li
262.5 51.3547 li
256.02 51.3547 li
268.98 49.1947 mo
275.46 49.1947 li
275.46 51.3547 li
268.98 51.3547 li
281.94 49.1947 mo
288.42 49.1947 li
288.42 51.3547 li
281.94 51.3547 li
294.9 49.1947 mo
301.38 49.1947 li
301.38 51.3547 li
294.9 51.3547 li
307.86 49.1947 mo
314.34 49.1947 li
314.34 51.3547 li
307.86 51.3547 li
320.82 49.1947 mo
327.3 49.1947 li
327.3 51.3547 li
320.82 51.3547 li
333.78 49.1947 mo
336.66 49.1947 li
336.66 51.3547 li
333.78 51.3547 li
.216617 .781888 .666407 .0769665 cmyk
f
77.4599 223.075 mo
104.1 223.075 li
.605097 .381781 .0599374 0 cmyk
@
4 ml
108.42 223.075 mo
108.42 223.361 108.365 223.637 108.255 223.901 cv
108.146 224.166 107.99 224.399 107.787 224.602 cv
107.585 224.805 107.351 224.961 107.086 225.07 cv
106.822 225.18 106.546 225.235 106.26 225.235 cv
105.973 225.235 105.698 225.18 105.433 225.07 cv
105.169 224.961 104.935 224.805 104.733 224.602 cv
104.53 224.399 104.374 224.166 104.264 223.901 cv
104.155 223.637 104.1 223.361 104.1 223.075 cv
104.1 222.788 104.155 222.513 104.264 222.248 cv
104.374 221.983 104.53 221.75 104.733 221.547 cv
104.935 221.345 105.169 221.189 105.433 221.079 cv
105.698 220.969 105.973 220.915 106.26 220.915 cv
106.546 220.915 106.822 220.969 107.086 221.079 cv
107.351 221.189 107.585 221.345 107.787 221.547 cv
107.99 221.75 108.146 221.983 108.255 222.248 cv
108.365 222.513 108.42 222.788 108.42 223.075 cv
cp
@
10 ml
106.26 194.275 mo
132.9 194.275 li
@
4 ml
137.22 194.275 mo
137.22 194.561 137.165 194.837 137.055 195.101 cv
136.946 195.366 136.79 195.599 136.587 195.802 cv
136.385 196.005 136.151 196.161 135.886 196.27 cv
135.622 196.38 135.346 196.435 135.06 196.435 cv
134.773 196.435 134.498 196.38 134.233 196.27 cv
133.969 196.161 133.735 196.005 133.533 195.802 cv
133.33 195.599 133.174 195.366 133.064 195.101 cv
132.955 194.837 132.9 194.561 132.9 194.275 cv
132.9 193.988 132.955 193.713 133.064 193.448 cv
133.174 193.183 133.33 192.95 133.533 192.747 cv
133.735 192.545 133.969 192.389 134.233 192.279 cv
134.498 192.169 134.773 192.115 135.06 192.115 cv
135.346 192.115 135.622 192.169 135.886 192.279 cv
136.151 192.389 136.385 192.545 136.587 192.747 cv
136.79 192.95 136.946 193.183 137.055 193.448 cv
137.165 193.713 137.22 193.988 137.22 194.275 cv
cp
@
10 ml
135.06 165.475 mo
161.7 165.475 li
@
4 ml
166.02 165.475 mo
166.02 165.761 165.965 166.037 165.855 166.301 cv
165.746 166.566 165.59 166.799 165.387 167.002 cv
165.185 167.205 164.951 167.361 164.686 167.47 cv
164.422 167.58 164.146 167.635 163.86 167.635 cv
163.573 167.635 163.298 167.58 163.033 167.47 cv
162.769 167.361 162.535 167.205 162.332 167.002 cv
162.13 166.799 161.974 166.566 161.864 166.301 cv
161.755 166.037 161.7 165.761 161.7 165.475 cv
161.7 165.188 161.755 164.913 161.864 164.648 cv
161.974 164.383 162.13 164.15 162.332 163.947 cv
162.535 163.745 162.769 163.589 163.033 163.479 cv
163.298 163.369 163.573 163.315 163.86 163.315 cv
164.146 163.315 164.422 163.369 164.686 163.479 cv
164.951 163.589 165.185 163.745 165.387 163.947 cv
165.59 164.15 165.746 164.383 165.855 164.648 cv
165.965 164.913 166.02 165.188 166.02 165.475 cv
cp
@
10 ml
163.86 136.675 mo
190.5 136.675 li
@
4 ml
194.82 136.675 mo
194.82 136.961 194.765 137.237 194.655 137.501 cv
194.546 137.766 194.39 137.999 194.187 138.202 cv
193.985 138.405 193.751 138.561 193.486 138.67 cv
193.222 138.78 192.946 138.835 192.66 138.835 cv
192.373 138.835 192.098 138.78 191.833 138.67 cv
191.569 138.561 191.335 138.405 191.132 138.202 cv
190.93 137.999 190.774 137.766 190.664 137.501 cv
190.555 137.237 190.5 136.961 190.5 136.675 cv
190.5 136.388 190.555 136.113 190.664 135.848 cv
190.774 135.583 190.93 135.35 191.132 135.147 cv
191.335 134.945 191.569 134.789 191.833 134.679 cv
192.098 134.569 192.373 134.515 192.66 134.515 cv
192.946 134.515 193.222 134.569 193.486 134.679 cv
193.751 134.789 193.985 134.945 194.187 135.147 cv
194.39 135.35 194.546 135.583 194.655 135.848 cv
194.765 136.113 194.82 136.388 194.82 136.675 cv
cp
@
10 ml
250.26 50.2747 mo
336.66 50.2747 li
@
48.6599 251.875 mo
336.588 251.875 li
.75021 .679683 .670222 .90164 cmyk
@
341.448 251.875 mo
334.968 255.115 li
336.588 251.875 li
334.968 248.635 li
341.448 251.875 li
cp
f
341.448 251.875 mo
334.968 255.115 li
336.588 251.875 li
334.968 248.635 li
341.448 251.875 li
cp
@
48.6599 251.875 mo
75.2999 251.875 li
.605097 .381781 .0599374 0 cmyk
@
4 ml
79.6199 251.875 mo
79.6199 252.161 79.5651 252.437 79.4554 252.701 cv
79.3458 252.966 79.1897 253.199 78.9872 253.402 cv
78.7847 253.605 78.5511 253.761 78.2865 253.87 cv
78.0218 253.98 77.7463 254.035 77.4599 254.035 cv
77.1734 254.035 76.8979 253.98 76.6333 253.87 cv
76.3686 253.761 76.1351 253.605 75.9325 253.402 cv
75.73 253.199 75.5739 252.966 75.4643 252.701 cv
75.3546 252.437 75.2999 252.161 75.2999 251.875 cv
75.2999 251.588 75.3546 251.313 75.4643 251.048 cv
75.5739 250.783 75.73 250.55 75.9325 250.347 cv
76.1351 250.145 76.3686 249.989 76.6333 249.879 cv
76.8979 249.769 77.1734 249.715 77.4599 249.715 cv
77.7463 249.715 78.0218 249.769 78.2865 249.879 cv
78.5511 249.989 78.7847 250.145 78.9872 250.347 cv
79.1897 250.55 79.3458 250.783 79.4554 251.048 cv
79.5651 251.313 79.6199 251.588 79.6199 251.875 cv
cp
@
10 ml
192.66 107.875 mo
219.3 107.875 li
@
4 ml
223.62 107.875 mo
223.62 108.161 223.565 108.437 223.455 108.701 cv
223.346 108.966 223.19 109.199 222.987 109.402 cv
222.785 109.605 222.551 109.761 222.286 109.87 cv
222.022 109.98 221.746 110.035 221.46 110.035 cv
221.173 110.035 220.898 109.98 220.633 109.87 cv
220.369 109.761 220.135 109.605 219.933 109.402 cv
219.73 109.199 219.574 108.966 219.464 108.701 cv
219.355 108.437 219.3 108.161 219.3 107.875 cv
219.3 107.588 219.355 107.313 219.464 107.048 cv
219.574 106.783 219.73 106.55 219.933 106.347 cv
220.135 106.145 220.369 105.989 220.633 105.879 cv
220.898 105.769 221.173 105.715 221.46 105.715 cv
221.746 105.715 222.022 105.769 222.286 105.879 cv
222.551 105.989 222.785 106.145 222.987 106.347 cv
223.19 106.55 223.346 106.783 223.455 107.048 cv
223.565 107.313 223.62 107.588 223.62 107.875 cv
cp
@
1 /0 /CSD get_res sepcs
1 sep
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
%ADOBeginSubsetFont: INAMPU+ Initial
10 dict begin
ct_T3Defs
/FontType 3 def
/FontName /INAMPU+ def
/FontMatrix [0.001 0 0 -0.001 0 0 ] def
/FontBBox [-0.009 -0.014 0.287 0.676 ] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /g10 put
 def
/GlyphProcs 256 dict begin
/.notdef {250 0 0 0 250 0 setcachedevice
}bind def
/g10 {278 0 -9 -676 287 14 setcachedevice
287 -676 mo
220 -676 li
-9 14 li
59 14 li
287 -676 li
cp
false sop
f
}bind def
currentdict end def FontName currentdict end definefont pop
%ADOEndSubsetFont
/INAMPV+ /INAMPU+ findfont ct_VMDictPut
/INAMPV+*1 
[32{/.notdef}rp /g10 223{/.notdef}rp]
INAMPV+ nf
INAMPV+*1 [15.264 0 0 -15.264 0 0 ]msf
326.276 275.854 mo
( )sh
%ADOBeginSubsetFont: INAMPW+ Initial
10 dict begin
ct_T3Defs
/FontType 3 def
/FontName /INAMPW+ def
/FontMatrix [0.001 0 0 -0.001 0 0 ] def
/FontBBox [0 -0.01 0.526 0.678 ] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /g21E put
 def
/GlyphProcs 256 dict begin
/.notdef {250 0 0 0 250 0 setcachedevice
}bind def
/g21E {556 0 19 -678 526 10 setcachedevice
526 -206 mo
501 -210 480 -217 459 -224 cv
492 -314 506 -412 506 -481 cv
506 -575 466 -678 351 -678 cv
304 -678 262 -663 229 -632 cv
197 -602 174 -556 174 -492 cv
174 -376 263 -275 382 -223 cv
350 -112 297 -11 214 -11 cv
169 -11 157 -48 157 -89 cv
157 -112 161 -138 168 -163 cv
186 -223 li
193 -247 194 -266 194 -275 cv
194 -305 178 -320 150 -320 cv
112 -320 66 -285 19 -214 cv
32 -205 li
73 -257 87 -265 101 -265 cv
109 -265 113 -261 113 -251 cv
113 -244 111 -230 105 -212 cv
84 -147 li
80 -134 77 -111 77 -94 cv
77 -34 111 10 211 10 cv
326 10 404 -89 450 -199 cv
473 -193 497 -189 521 -187 cv
526 -206 li
cp
422 -484 mo
422 -436 414 -345 392 -256 cv
280 -324 258 -436 258 -498 cv
258 -571 285 -645 343 -645 cv
405 -645 422 -565 422 -484 cv
cp
false sop
f
}bind def
currentdict end def FontName currentdict end definefont pop
%ADOEndSubsetFont
/INAMPX+ /INAMPW+ findfont ct_VMDictPut
/INAMPX+*1 
[32{/.notdef}rp /g21E 223{/.notdef}rp]
INAMPX+ nf
INAMPX+*1 [15.264 0 0 -15.264 0 0 ]msf
330.517 275.854 mo
( )sh
false sop
1 /0 /CSD get_res sepcs
1 sep
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
%ADOBeginSubsetFont: INAMPY+ Initial
10 dict begin
ct_T3Defs
/FontType 3 def
/FontName /INAMPY+ def
/FontMatrix [0.001 0 0 -0.001 0 0 ] def
/FontBBox [-0.002 -0.081 0.476 0.441 ] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /g5B put
 def
/GlyphProcs 256 dict begin
/.notdef {250 0 0 0 250 0 setcachedevice
}bind def
/g5B {389 0 -2 -428 380 81 setcachedevice
380 -417 mo
380 -428 li
97 -428 li
65 -312 li
81 -308 li
101 -359 120 -368 172 -368 cv
308 -368 li
-2 4 li
7 13 li
23 0 36 -5 52 -5 cv
78 -5 110 8 157 37 cv
207 68 241 81 270 81 cv
326 81 363 45 363 5 cv
363 -17 349 -32 328 -32 cv
312 -32 296 -15 295 2 cv
295 10 297 18 303 30 cv
306 36 308 41 308 45 cv
308 54 297 60 281 60 cv
256 60 237 48 211 10 cv
171 -49 149 -60 91 -73 cv
380 -417 li
cp
false sop
f
}bind def
currentdict end def FontName currentdict end definefont pop
%ADOEndSubsetFont
/INAMPZ+ /INAMPY+ findfont ct_VMDictPut
/INAMPZ+*1 
[32{/.notdef}rp /g5B 223{/.notdef}rp]
INAMPZ+ nf
INAMPZ+*1 [15.264 0 0 -15.264 0 0 ]msf
316.196 275.854 mo
( )sh
false sop
1 /0 /CSD get_res sepcs
1 sep
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
%ADOBeginSubsetFont: INAMQA+ Initial
10 dict begin
ct_T3Defs
/FontType 3 def
/FontName /INAMQA+ def
/FontMatrix [0.001 0 0 -0.001 0 0 ] def
/FontBBox [-0.124 -0.207 0.704 0.683 ] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /g4D put
 def
/GlyphProcs 256 dict begin
/.notdef {250 0 0 0 250 0 setcachedevice
}bind def
/g4D {278 0 41 -683 279 11 setcachedevice
279 -678 mo
273 -683 li
214 -670 177 -663 118 -656 cv
118 -640 li
136 -640 li
168 -640 185 -630 185 -618 cv
185 -615 185 -609 182 -599 cv
45 -75 li
42 -65 41 -53 41 -45 cv
41 -8 58 11 90 11 cv
144 11 181 -19 241 -114 cv
227 -124 li
202 -89 li
173 -48 150 -32 135 -32 cv
125 -32 118 -38 118 -50 cv
118 -58 121 -75 126 -93 cv
279 -678 li
cp
false sop
f
}bind def
currentdict end def FontName currentdict end definefont pop
%ADOEndSubsetFont
/INAMQB+ /INAMQA+ findfont ct_VMDictPut
/INAMQB+*1 
[32{/.notdef}rp /g4D 223{/.notdef}rp]
INAMQB+ nf
INAMQB+*1 [10.7856 0 0 -10.7856 0 0 ]msf
322.125 270.814 mo
( )sh
false sop
1 /0 /CSD get_res sepcs
1 sep
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
%ADOBeginSubsetFont: INAMQA+ AddGlyphs
systemdict begin INAMQB+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g4B {278 0 -124 -652 279 207 setcachedevice
279 -598 mo
279 -626 255 -652 228 -652 cv
200 -652 175 -630 175 -600 cv
175 -569 199 -548 229 -548 cv
255 -548 279 -571 279 -598 cv
cp
246 -438 mo
242 -441 li
158 -426 105 -418 73 -416 cv
73 -400 li
99 -400 li
135 -400 147 -391 147 -369 cv
147 -359 143 -338 131 -289 cv
59 3 li
25 141 2 185 -38 185 cv
-50 185 -56 180 -56 173 cv
-56 158 -44 161 -44 139 cv
-44 118 -56 102 -83 102 cv
-106 102 -124 122 -124 146 cv
-124 182 -91 207 -45 207 cv
42 207 101 134 142 -28 cv
246 -438 li
cp
false sop
f
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/INAMQB+*1 
[32{/.notdef}rp /g4D /g4B 222{/.notdef}rp]
INAMQB+ nf
INAMQB+*1 [10.7856 0 0 -10.7856 0 0 ]msf
322.125 280.174 mo
(!)sh
false sop
1 /0 /CSD get_res sepcs
1 sep
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
%ADOBeginSubsetFont: INAMPY+ AddGlyphs
systemdict begin INAMPZ+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g42 {501 0 17 -441 476 11 setcachedevice
463 -111 mo
436 -82 li
406 -49 393 -41 384 -41 cv
376 -41 370 -47 370 -54 cv
370 -74 412 -246 459 -417 cv
462 -427 463 -429 465 -438 cv
458 -441 li
397 -434 li
394 -431 li
383 -383 li
375 -420 346 -441 303 -441 cv
170 -441 17 -260 17 -105 cv
17 -29 61 11 117 11 cv
187 11 245 -33 320 -146 cv
299 -64 297 -56 297 -31 cv
297 -2 309 10 337 10 cv
377 10 401 -9 476 -100 cv
463 -111 li
cp
365 -361 mo
365 -290 335 -204 288 -136 cv
258 -93 211 -38 161 -38 cv
125 -38 101 -57 101 -112 cv
101 -175 136 -264 178 -327 cv
220 -388 264 -419 309 -419 cv
344 -419 365 -396 365 -361 cv
cp
false sop
f
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/INAMPZ+*1 
[32{/.notdef}rp /g5B /g42 222{/.notdef}rp]
INAMPZ+ nf
INAMPZ+*1 [15.264 0 0 -15.264 0 0 ]msf
21.2886 18.0941 mo
(!)sh
false sop
1 /0 /CSD get_res sepcs
1 sep
INAMQB+*1 [10.7856 0 0 -10.7856 0 0 ]msf
28.9274 13.0541 mo
( )sh
INAMQB+*1 [10.7856 0 0 -10.7856 0 0 ]msf
28.9274 22.4141 mo
(!)sh
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
%ADOBeginSubsetFont: INAMPY+ AddGlyphs
systemdict begin INAMPZ+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g53 {389 0 45 -441 412 0 setcachedevice
176 -223 mo
231 -439 li
228 -441 li
73 -414 li
73 -397 li
88 -399 96 -400 104 -400 cv
124 -400 142 -395 142 -374 cv
142 -353 140 -344 126 -292 cv
45 0 li
121 0 li
171 -168 189 -208 232 -282 cv
268 -343 296 -376 314 -376 cv
321 -376 324 -372 330 -362 cv
339 -347 347 -336 365 -336 cv
395 -336 412 -360 412 -390 cv
412 -420 393 -441 365 -441 cv
342 -441 312 -423 286 -396 cv
245 -353 211 -300 192 -258 cv
176 -223 li
cp
false sop
f
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/INAMPZ+*1 
[32{/.notdef}rp /g5B /g42 /g53 221{/.notdef}rp]
INAMPZ+ nf
INAMPZ+*1 [15.264 0 0 -15.264 0 0 ]msf
14.4711 56.0347 mo
(")sh
false sop
1 /0 /CSD get_res sepcs
1 sep
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
Adobe_AGM_Core/ps gx
gsave
grestore
Adobe_AGM_Core/pt gx
%ADOBeginSubsetFont: INAMQA+ AddGlyphs
systemdict begin INAMQB+
/GlyphProcs get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/g4E {722 0 12 -441 704 9 setcachedevice
704 -105 mo
689 -117 li
668 -91 li
638 -54 620 -38 603 -38 cv
595 -38 591 -43 591 -54 cv
591 -58 595 -76 601 -99 cv
669 -350 li
670 -355 672 -371 672 -378 cv
672 -414 651 -441 614 -441 cv
594 -441 575 -436 551 -421 cv
502 -390 461 -340 391 -229 cv
418 -306 431 -362 431 -381 cv
431 -417 411 -441 371 -441 cv
310 -441 240 -375 151 -230 cv
209 -439 li
206 -441 li
44 -410 li
44 -394 li
69 -394 li
96 -394 110 -387 110 -372 cv
110 -360 95 -277 55 -144 cv
12 0 li
87 0 li
135 -158 149 -194 183 -246 cv
239 -331 298 -389 332 -389 cv
345 -389 354 -380 354 -364 cv
354 -351 330 -245 286 -93 cv
259 0 li
334 0 li
373 -154 393 -203 442 -272 cv
492 -342 543 -389 573 -389 cv
584 -389 593 -380 593 -368 cv
593 -363 591 -350 586 -330 cv
528 -103 li
518 -64 515 -47 515 -37 cv
515 -7 529 9 555 9 cv
602 9 646 -24 699 -98 cv
704 -105 li
cp
false sop
f
}bind def
/g42 {501 0 17 -441 476 11 setcachedevice
463 -111 mo
436 -82 li
406 -49 393 -41 384 -41 cv
376 -41 370 -47 370 -54 cv
370 -74 412 -246 459 -417 cv
462 -427 463 -429 465 -438 cv
458 -441 li
397 -434 li
394 -431 li
383 -383 li
375 -420 346 -441 303 -441 cv
170 -441 17 -260 17 -105 cv
17 -29 61 11 117 11 cv
187 11 245 -33 320 -146 cv
299 -64 297 -56 297 -31 cv
297 -2 309 10 337 10 cv
377 10 401 -9 476 -100 cv
463 -111 li
cp
365 -361 mo
365 -290 335 -204 288 -136 cv
258 -93 211 -38 161 -38 cv
125 -38 101 -57 101 -112 cv
101 -175 136 -264 178 -327 cv
220 -388 264 -419 309 -419 cv
344 -419 365 -396 365 -361 cv
cp
false sop
f
}bind def
/g59 {444 0 -27 -441 447 11 setcachedevice
243 -355 mo
229 -423 217 -441 192 -441 cv
169 -441 136 -434 75 -412 cv
64 -408 li
67 -392 li
85 -397 li
104 -402 116 -404 124 -404 cv
149 -404 156 -396 170 -336 cv
198 -212 li
116 -96 li
95 -66 76 -47 65 -47 cv
59 -47 49 -50 39 -56 cv
26 -63 16 -67 7 -67 cv
-13 -67 -27 -51 -27 -31 cv
-27 -5 -8 11 23 11 cv
54 11 74 2 118 -57 cv
206 -176 li
235 -57 li
247 -7 262 11 294 11 cv
332 11 358 -13 416 -103 cv
401 -112 li
393 -102 389 -96 380 -84 cv
357 -54 346 -44 333 -44 cv
319 -44 310 -57 303 -85 cv
271 -219 li
265 -243 263 -257 263 -264 cv
307 -341 343 -385 361 -385 cv
385 -385 394 -368 413 -368 cv
433 -368 447 -383 447 -404 cv
447 -426 430 -441 406 -441 cv
362 -441 325 -405 255 -298 cv
243 -355 li
cp
false sop
f
}bind def
systemdict /gcheck known {setglobal} if end end
%ADOEndSubsetFont
/INAMQB+*1 
[32{/.notdef}rp /g4D /g4B /g4E /g42 /g59 219{/.notdef}rp]
INAMQB+ nf
INAMQB+*1 [10.7856 0 0 -10.7856 0 0 ]msf
20.4111 58.1947 mo
(")sh
28.1961 58.1947 mo
(#)sh
33.5961 58.1947 mo
($)sh
false sop
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: WXMBAA+TimesNewRomanPS-BoldMT Initial
ct_T42Dict begin
-0.555 -0.305 2 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /WXMBAA+TimesNewRomanPS-BoldMT
Type42DictBegin
[<00010000000b000b000b000b6376742070f2f156000000bc000008266670
676d16b3121f000008e400000586676c796690d4a0c50000a3180000083e
68656164d8a4fb4800000e6c00000036686865611304165900000ea40000
0024686d747870c84dca00000ec8000034d06c6f6361006c2aa800004398
000034d46d617870162a04780000786c000000206e616d65692e89290000
788c00001748707265706b6e3b5c00008fd4000013416764697200000000
0000000000000000058e001f054c001f054c001c0394001b0000ffe10000
ffe40000ffe8fe4afffc056b0023fe6affe0031300000124000001240000
00000000000000250084002400e8009600bf005d00cb02030045012e0058
00040118001900020139004b011000170005010a00280023004b00500015
004a00e5010d00af003100ea014600810125004f009c0022004e00160041
009100a00147ffe9008100d3016900ab001700a801400027004c0148ffdf
00510050ffb7012e0000003b0097009a010e001f004c010a0123ffde0022
0073008700ba00d600ff005a009805a0ffe900500052006effb7005c00d1
015a015bff1c0049006e007e009800a100bd00e4018801c00405ff600035
006200720107011301280382ffa8003805d809b5ffc4ffd00010006e00a1
00ba00ec022b0446ffee004000e80401ff680003001300330033006e00a2
00b600dc011801350343000e0034005c005d007c00af0328003b00480089
009c00ba017b01af030effa4001700370063007f00e0017801c0022105d8
05f0ff7a0012002700340052008a00a400c100c300eb011801460154036d
fe3fff4e00010008002b0045006e0084008600ae00af00c200c200c4010f
01210149017b01c101de01e1036e03e6006300a700ed00f600f801280169
017e023f02820532fd81ffb5002600350040004500490057006c00ac0126
0140015b017b019c0277027e027f03b603dc042804efff38ffc30006002f
0040008200aa00b600ce00d300d700e50146014d01d6027e03b30586ff7b
0012002f0068007f008400a500b900f501050109010c0114012001330137
0178017b01c001e1021d02230258036203af058cff79ff8d00210024005d
00650068006a0083008500b700cf00e200eb00ed011a0120012f0137013f
0150018d018f01c402cf0357035c03960440049604ab04c204fc051105c2
fed1fee00013002100240030004d004d005d0066007a007c00b800b800c3
00da0103011b011e012f013d014a0150015f0166017c0190019501a301a6
01b601c701d001e901ef01f90218028c029402bb02c502cf02d0031d032a
0344039f03cc042104da04fb0761fd1dfebffeefff0bff2bff33ff90ff9c
ffdbffed00010008001c0025003f0043005a006b0080008400900095009d
00a700b400cd00d500d600df00df00df00e400f000f600fb010601130119
011b012201230127012c013f015701580177018a019301a401c601e101e4
01fc0200020c02220222022a0236024a025c028202ec02fc030a03230341
0378039703d203fa04790532053205ab05b505f006e4072508ccfc9bfdde
fe00fe69fe96fe9bff3500030006000e00130019003400420048004a0057
006400710071007200760077007a007a0083009c00af00af00b200bb00c8
00cc00cf00cf00db00dc00df00e400e400e400e900eb00f400fd00fe0102
0105010501080108011b01220123013001370143015b0160016501780178
01780178017b0182018901980198019b019e01a101a601d101d201d301df
01e301f502000200022d02410247024a0250025b025d025d025f02630281
028b02b402b402ce02d602db02e202fa03100311031f0327034503670388
038a03b003b403d403d5042604410448046b04c704d1053205480549055f
0563058b05a105a305c205ca05e405ff069306a206b806e8070a07360750
0754078907a907bb07dc07ff08270120014d011b01290000000000000000
00000093015b042f029001ff02b800db00be027403cb029401ab00000000
0000000000000000058a038a0364005f02b803bd029d7c9003e203ac0282
0000044400000000003d010a00cc00bc00cc05d3041505e800c7021a00ee
00000194036102be029902180136033b048504cc0050007905a305a302df
020702af000001eb0064005f0055011900f2045600ef00c800cf058a0143
014602de01ab02c6024a005d00d800a402bb009900a00065013702740364
00b500fa009101b9032001b60025007f00d000ec00e00000000000000000
0000042ffd42023f06180276063a013701b90151ffc70229ffeb023f02e1
018500db03fa01900156014e012f00a600e300bb00d50134011f04fe041b
00d100e4011e009b00cd00e700b300e200ca042400b800f500b90334005a
04e00123012ffdc9fe440574038301f602410002001700500015004f0017
00a80051009800520049006e000e00af017b017b019c006a008300eb00cd
0122000005d306da009a008f00ba0315002503a5028002ff03c804200092
00e0034c009b007d00f8011c013400a8006d006900000420ffe6fea4006a
006a003800380162015a0044006d0048001eff6d00a600a600400040ff5c
ff990559052b00ce014c011500bf0140011800c800960509feed004800b4
009500db0048018b00b3fe6400c000ea01180125013203b003ed05760590
05aa05b405be05cd063100780084009b00cc00e200f4010a0120016300d1
00ea00f7010801420019002c00340041003800480058006c025903bd0043
011a007000d30028003700420050005a0064007300780082008c009c00a5
00bd00ce00f00110015c00be00d801020117012c016300ea01080041004b
0055005f007300a60109018301b300410064001e002a00eb00fa010e0138
0274002c00400082009600b600c000cc00dc00e600f000ff010a0120012c
013b01440156016300f70057006401100136005001b10000ffb60039004e
004403cc00e5002401100042012201a400f0006000e0000e001d003905e3
0102002cfe4eff38026903bd011600ff000e00a00054001b003d01710041
000f005000fd0015014f0035fe47003900ab0080005005a50016002b00ac
0115021504570555007300da005c00ce0072ff58019a0744000040425554
403f3e3d3c3b3a3938373534333231302f2e2d2c2b2a2928272625242322
21201f1e1d1c1b1a191817161514131211100f0e0d0c0b0a090807060504
030201002c4523466020b02660b004262348482d2c452346236120b02661
b004262348482d2c45234660b0206120b04660b004262348482d2c452346
2361b0206020b02661b02061b004262348482d2c45234660b0406120b066
60b004262348482d2c4523462361b0406020b02661b04061b00426234848
2d2c0110203c003c2d2c20452320b0cd442320b8015a51582320b08d4423
5920b0ed51582320b04d44235920b09051582320b00d44235921212d2c20
204518684420b001602045b04676688a4560442d2c01b10b0a432343650a
2d2c00b10a0b4323430b2d2c00b0172370b101173e01b0172370b1021745
3ab10200080d2d2c45b01a234445b01923442d2c2045b00325456164b050
515845441b2121592d2cb00143632362b0002342b00f2b2d2c2045b00043
60442d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb8
100062602b0c642364615c58b00361592d2c45b0112bb0172344b0177ae4
182d2c45b0112bb01723442d2cb01243588745b0112bb0172344b0177ae4
1b038a45186920b01723448a8a8720b0a05158b0112bb0172344b0177ae4
1b21b0177ae45959182d2c2d2cb0022546608a46b040618c482d2c4b5320
5c58b002855958b00185592d2c20b0032545b019234445b01a2344456523
4520b00325606a20b009234223688a6a606120b01a8ab000527921b21a1a
40b9ffe0001a45208a54582321b03f1b235961441cb114008a5279b31940
201945208a54582321b03f1b235961442d2cb110114323430b2d2cb10e0f
4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f4323
43650b2d2cb11011432343650b2d2c4b525845441b2121592d2c0120b003
252349b04060b0206320b000525823b002253823b002256538008a63381b
212121212159012d2c4bb06451584569b00943608a103a1b212121592d2c
01b005251023208af500b0016023edec2d2c01b005251023208af500b001
6123edec2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20
b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3e
b02a2a2d2c352d2c76b8029f23701020b8029f4520b0005058b00161593a
2f182d2c21210c6423648bb84000622d2c21b08051580c6423648bb82000
621bb200402f2b59b002602d2c21b0c051580c6423648bb81555621bb200
802f2b59b002602d2c0c6423648bb84000626023212d2cb4000100000015
b00826b00826b00826b008260f10161345683ab001162d2cb40001000000
15b00826b00826b00826b008260f1016134568653ab001162d2c4b53234b
515a5820458a60441b2121592d2c4b545820458a60441b2121592d2c4b53
234b515a58381b2121592d2c4b5458381b2121592d2cb0134358031b0259
2d2cb0134358021b03592d2c4b54b012435c5a58381b2121592d2cb01243
5c580cb00425b00425060c6423646164b807085158b00425b00425012046
b01060482046b0106048590a21211b2121592d2cb012435c580cb00425b0
0425060c6423646164b807085158b00425b00425012046b8fff060482046
b8fff06048590a21211b2121592d2c4b53234b515a58b03a2b1b2121592d
2c4b53234b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a5838
1b2121592d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b21
21592d2c462346608a8a462320468a608a61b8ff8062232010238ab90327
03278a70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d
2cb1020042b123018851b1400188535a58b910000020885458b202010243
604259592d2cb0024354584b53234b515a58381b2121591b21212121592d
0000000100000005028fb4c1bb415f0f3cf50819080000000000a2e33546
00000000c30778b3fb89fd8c100008350001000900010001000000000001
00000721fe4500571000fb89fadf10000001000000000000000000000000
00000d340639011c00000000020000000200000002aa00af047100b00400
00280400004f0800008e06aa00520239008c02aa005202aa001904000072
048f00280200004202aa00320200005a023900020400004a040000870400
00320400002104000033040000450400004c04000045040000480400003f
02aa00af02aa0098048f0029048f0028048f00290400007d0771005c05c7
00100556002b05c7005105c7001b0556002904e3002e063900530639002b
031d0029040000160639002e05560026078d002905c7001d0639005004e3
00340639005005c700260473006a0556004a05c7003005c7001008000012
05c7000e05c700120556002102aa00d60239000202aa004304a600930400
ffed02aa00260400005c0473002b038d004e0473004f038d004f02aa0042
0400004d047300460239002a02aaffc7047300440239002b06aa004c0473
00460400004a047300270473004e038d004b031d005102aa00260473003f
0400001305c700110400002f04000011038d0015032700a501c3009f0327
005b0429000c05c7001005c7001105c700510556002905c7001d06390050
05c700470400005c0400005c0400005c0400005c0400005c0400005c038d
004e038d004f038d004f038d004f038d004f0239002b0239fff10239ffdd
0239ffe30473004604000049040000490400004904000049040000490473
003f0473003f0473003f0473003f040000630333003b0400008004000023
0400005c02cd004d045200010473003a05fa003b05fa003b0800fffd02aa
00e402aa00160464000f0800ffe90639005105b400350464000f0464000e
0464000e04000000049c004f03f4004e05b4002b0696002e046400340231
00000266002e02a400380625000905c7005a040000440400007302aa00af
048f0029046400540400ffff0464000d04e5001a04000024040000260800
00af05c7001005c70010063900500800004a05c700460400ffef0800ffec
040000510400005302aa009802aa00980464001003f4002f0400001205c7
00110156fe870400ffe902aa005d02aa005f0473003b047300360400006e
0200005902aa0098040000530800003b05c700100556002905c700100556
002905560029031d0029031d0029031d0029031d00280639005006390050
0639005005c7004705c7004705c700470239002a02aa001502aa001402aa
001402aa002702aa00c302aa008402aa009102aa007002aa005802aa0015
0556002a023900260473006b031d004505560022038d001501c3009f05c7
00230400004a05c700110400001104e3002904730027048f0028048f009a
0266004a026600180266000f06000048060000480600000d040000150639
00530400004d031d00290473006a031d005105c70051038d004e05c70051
038d004e0473004f0400ffed02ab00d105c700100400005c05c700100400
005c05c7001b05de005305c7002305560029038d004f05560029038d004f
055600260239002b0556002603c0002a05560026032a002b05c7001d0473
004605c7001d04730046063900500400004a05c70026038d004b05c70026
038d004b0473006a031d00510556004a02aa00260556004a042b002505c7
00300473003f05c700300473003f05560021038d001505560021038d0015
051700290639004d06a2004e047700570427004a036b0041045a004903b0
000204fe00500400ffed04d500ae02c8002b07c000260800004f04000099
0800004f040000990800004f040000980400009807d5016a05c000b6048f
002504cd0099048f002304d5022204d5010505abffe905ab027e05ab027e
05abffe905ab027e05abffe905ab027e05abffe905abffe905abffe905ab
ffe905abffe905ab01c005ab027e05ab01c005ab01c005abffe905abffe9
05abffe905ab027e05ab01c005ab01c005abffe905abffe905abffe905ab
027e05ab01c005ab01c005abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905ab02d605ab006605abffea05d5ffff
04d500920800000007eb013007eb012007eb013007eb012004d500b204d5
008004d5002a082b0198086b01b807550010060000f40600006f0440003a
0540003704c0003f04150040040000250600005506950028046b002705d5
fffd024000c6046b00c606aa00370300001a04d5009202d6005c02d6005c
04d500b202d6004d05c700100400005c05c70051038d004e05c70051038d
004e05560029038d004f05560029038d004f05560029038d004f06390053
0400004d063900530400004d063900530400004d0639002b047300460639
002b04730046031d00290239ffda031d00290239ffdb031d00290239ffee
031d00290239002a0400001602aaffc70639002e04730044047300480556
00260239002b05c7001d047300460627002c0473004b063900500400004a
063900500400004a05c70026038d004b0473006a031d004e0556004a02aa
002505c700300473003f05c700300473003f05c700300473003f05c70030
0473003f0800001205c7001105c70012040000110239000705c700110400
005c0800ffe905c7005a063900510400004402aa00af0800001205c70011
0800001205c700110800001205c7001105c700120400001102aa009702aa
ffd80400002304cd005a060000480600001f0600002b0600002c02aa0079
02aa009102aa00e402aaff8405c700100664ff750746ff75042dff750639
ff8806ebff750668ff76027bff6d05c700100556002b0504003105560029
055600210639002b031d00290639002e05bc0009078d002905c7001d056b
0073063900500639002904e30034053b000c0556004a05c7001205c7000e
063d001f0668004b031d002c05c7001604770057036b0041048b0012027b
002c0427000a0437006603be0003034e0042048b0012042d0053027b002c
0471002403ee001c0489006b0393ffec0391003d0400004a044800650360
00390427000a03b2000f0581002105d9004f027bfff00427000a04000049
0427000a05d9004f055600290666004105170029056d004c0473006a031d
0029031d002c040000160806000c080400270666004105cd002a05df0012
0639002905c70010054a00220556002b05170029058100000556002907e9
001f04390029063900200639002005cd002a05f6000c078d00290639002b
063900500639002904e3003405c700510556004a05df001206df004b05c7
000e0639002905df000c08c9005608c90056061f004a07db0023054a0022
056d00600902002805c7ffe80400005c040000490452004903a20048040c
0000038d004f05cd000c0337001b049c0046049c0046049c0047047d000c
05730049049c00460400004a049c004604730027038d004e03ee00250400
0011058900520400002f049c00460483003406c1004706c1004704aa0024
063f004e043b004d0375001c061d004c04540023038d004b044c004903a2
004803750049031d00510239002a0239ffdd02aaffc7063d000c06600047
0473004b049c004704000011049c004604290029031d004908000041080a
000d0462000f000001010000001c0000003200000012000001020000008f
0000008f0000008f00000090000001020000001c000001020000012102e8
00590000008f02aa00ee000002af0000ff6b02aa00af0437002c03ac0027
02ef002103b7003d0419003d02630038028a003804090043043c0038027c
003803a9003803920027037bffdf0417004f04440038029b003802870021
03d30048040f002703f1003803a8002c04840038041e003803dd004303b6
0038058200380425001604c6003804df003804f80038020b008c03ae008c
061000850263ff9203a9003803a90038037bfef2037bfef2040f00270582
00380582002f058200380582002f0437002c0437002c0437002c03ac0027
02ef002103b7003d0419003d0263003802a7000c043c0038027c003803a9
003803920027037bffdf044400380287002103d3004803f1003803a8002c
041e003803dd004303b6003805820038042500160263003803ac00270392
002703a8002c0437ffdf0000ffdc0000ff250000ffdc0000fe51028d00ab
028d00a002da004303c0007e0196ffba0000004600000046000000460000
004600000048000000460000004600000046047e0188047e0150047e0104
047e009e047e012d047e00ea047e00d5047e009c047e00bc047e00ee0435
0085028d00c1043500b3060001000600010002be005806000100047e00a5
047e00bd047e00de06000100060001000600010006000100060001000000
004606000100060001000600010006000100060001000600010006000100
0600010004e6ffba0600010006000100060001000532003905320039022c
ffba022cffba06000100060001000600010006000100049e003404780030
0430ffba0430ffba0376000a0376000a060e00290708002902e2ffba0456
ffba060e00290708002902e2ffba0456ffba05280097046f001e03520003
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
000000300000004600000046000000400000004606000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010004000015080000000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
0100028d007f028d00670600010005a0002e03c0007e01e800000207ffc3
01bc005e01e0fffa039c0006039c000601bc005e01e0001a05280097049e
0011022cffba022cffba01bc008801e0001a0532003905320039022cffba
022cffba02be0036035200030532003905320039022cffba022cffba0532
003c0532003c022cffba022cffba049e0034047800300430ffba0430ffba
049e0034047800300430ffba0430ffba049e0034047800300430ffba0430
ffba02be006902be006902be006902be00690376000a0376000a0376000a
0376000a073200400732004004deffba04deffba073200400732004004de
ffba04deffba0880004008800040062cffba062cffba0880004008800040
062cffba062cffba0430ffba0430ffba0430ffba0430ffba0430ffba0430
ffba0430ffba0430ffba0454003403c000460454ffba02e2ffba04540034
03c000460454ffba02e2ffba0610002f0610002f0270ffba0298ffba04e6
002704e600270270ffba0298ffba045400290454002902e2ffba02e2ffba
039c0023039c002301e0ffba01e0ffba02e2002102e200210352ffba0352
ffba0454003e0454003e022cffba022cffba02be00580352000303c0ffba
039cffba039c0006039c000605280097046f001e05280097049e0011022c
ffba022cffba0454000004c4000003e400220454001a03e400220454001a
03e400220454001a06000100060001000000004600000046060001000600
010006000100000000460000004606000100060001000000004800000046
060001000600010006000100000000460000004600000046000000460000
004000000030060001000000004600000046060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100028d00ca028d
00c7028d00c6060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010002be00690100ffba0800ffba1000ffba06390050046e
004a065e003004cd003f0000fd7f0000fbbf0000fcc00000fdfc0000fcd0
0000fda00000fe1a0000fdb50000fd2f0000fc960000fd430000fc180000
fcd10000fef70000ff030000fe66041a009706000048060000180000fe4f
0000fd8e0000fdb80000fcd00000fe160000fd2d0000fbeb0000fba30000
fb890000fce50000fc660000fc200000fcb80000fc4a0000fc4a0000fc72
0000fbdc0000fdb80000fe770000fd880000fbfa0000fd760000fdcb0000
fe520000fc7d0000fdac0000fd5c0000fcee0000fcf80000fc9e0000fc2f
0000fc200000fbcb0000fbb70239002a05c700100400005c05c700100400
005c05c700100400005c05c700100400005c05c700100400005c05c70010
0400005c05c700100400005c05c700100400005c05c700100400005c05c7
00100400005c05c700100400005c05c700100400005c05560029038d004f
05560029038d004f05560029038d004f05560029038d004f05560029038d
004f05560029038d004f05560029038d004f05560029038d004f031d0029
0239002a031d00290239002a063900500400004a063900500400004a0639
00500400004a063900500400004a063900500400004a063900500400004a
063900500400004a06390050046e004a06390050046e004a06390050046e
004a06390050046e004a06390050046e004a05c700300473003f05c70030
0473003f065e003004cd003f065e003004cd003f065e003004cd003f065e
003004cd003f065e003004cd003f05c700120400001105c7001204000011
05c700120400001105c700100400005c031d00290239ffe8063900500400
004a05c700300473003f05c700300473003f05c700300473003f05c70030
0473003f05c700300473003f0000ff090000ff090000ff090000ff090517
002303a2002207e9001f05cd000c05cd002a049c004705cd002a049c0047
0639002b049c004605c700120400001305c700120400001305c7000e0400
002f05df000c0483003405df002b0473004605e90050038d003806390050
0400004a05320039022cffba0270ffba0298ffba04e60027022c0065022c
0016022c0016022c0011022c0043022cffd20000fef00000000f01a8fff5
02aa009002aa00900000000001bc005e0000005e0000ffcb01bc000f01e0
ffbf01bcfff501e0ffcd01bc001d01e0000901bc008801e0001a039c0006
039c0006039c0006039c000605280097046f001e0532003905320039022c
ffba022cffba0532003905320039022cffba022cffba0532003905320039
022cffba022cffba0532003905320039022cffba022cffba053200390532
0039022cffba022cffba0532003905320039022cffba022cffba05320039
05320039022cffba022cffba049e0034047800300430ffba0430ffba049e
0034047800300430ffba0430ffba049e0034047800300430ffba0430ffba
049e0034047800300430ffba0430ffba049e0034047800300430ffba0430
ffba049e0034047800300430ffba0430ffba02be004f02be004f02be0069
02be006902be006902be006902be004f02be004f02be006602be006602be
006902be006902be006902be006902be002f02be002f02be002202be0022
0376000a0376000a0376000a0376000a0376000a0376000a0376000a0376
000a0376000a0376000a0376000a0376000a0376000a0376000a0376000a
0376000a073200400732004004deffba04deffba073200400732004004de
ffba04deffba073200400732004004deffba04deffba0880004008800040
062cffba062cffba0880004008800040062cffba062cffba0430ffba0430
ffba0454003403c000460454ffba02e2ffba0610002f0610002f0610002f
0270ffba0298ffba0610002f0610002f0270ffba0298ffba0610002f0610
002f0270ffba0298ffba0610002f0610002f0270ffba0298ffba0610002f
0610002f0270ffba0298ffba04e6002704e6002704e6002704e60027093e
0032093e00320740ffba0740ffba060e00290708002902e2ffba0456ffba
045400290454002902e2ffba02e2ffba045400290454002902e2ffba02e2
ffba045400290454002902e2ffba02e2ffba060e00290708002902e2ffba
0456ffba060e00290708002902e2ffba0456ffba060e00290708002902e2
ffba0456ffba060e00290708002902e2ffba0456ffba060e002907080029
02e2ffba0456ffba039c0023039c002301e0ffba01e0ffba039c0023039c
002301e0ffb101e0ffb1039c0023039c002301e0ffba01e0ffba039c0023
039c002301e0ffba01e0ffba0454003e0454003e022cffba022cffba0454
003e0454003e0454003e0454003e0454003e0454003e022cffba022cffba
0454003e0454003e049e0034047800300430ffba0430ffba02be00580352
0003031a001a031a001a031a001a039c0006039c0006039c0006039c0006
039c0006039c0006039c0006039c0006039c0006039c0006039c0006039c
0006039c0006039c0006039c0006039c000605280042046fffd905280097
046f001e022cffba022cffba039c0006039c000605280097046f000a022c
ffba022cffba05280097046f000a067f0044067f0045067f0044067f0045
01a800280000fe290000fe8c0000ff250000ff230000fefa0000ff7a0000
fe5908fc003208ad00320000ffb50000ffb60000fef00000ff590000fe59
0000ff8c01b4000002f700000000fe850000ff0704cd00320000ff580000
ff580000ff59073200400732004004deffba04deffba0880004008800040
062cffba062cffba0454003403c000460454ffba02e2ffba03c0007e02e2
002102be0058022cffba0290ffba01f4002f01f4003b01f4001201f400b1
01f4006d060e002907080029027c00380000fed10350000004f8003803e4
fff50454fff503e400220454001a03e400220454001a03e400220454001a
03e400220454001a03e400220454001a03e400220454001a047e0072047e
00bd03e4000f0454000f0473002b060a0000054a00220473009a054a0022
0473000a05c7007005c70051038d004e05c7002306880000054a00420473
004f042700540556005c0439004704e3ffc70639005305c7001006410046
0274002b031d00290639002e047300440239001703ee001c0786006105c7
ff5f047300460639005008730051062a004a058e00000473002704e30029
04730052031d0049053b000c041a000002aa00260556000002aa00260556
004a0668004b05370030065300000400001105560021038d001504a70029
04a7004703ab003803a0001b04000032040900290314003502aa002604c5
004601c3009f029800a0023c001402aa00af0b1d001b0954001b0800004f
095600260800002604e3002b09c7001d0871001d071d0046038d003805c7
00100400005c0000ff0905c700100400005c0800ffe905c7005a06390053
0400001b063900530400004d0639002e04730044063900500400004a0639
00500400004a04a7002903ab001b02aaffc70b1d001b0954001b0800004f
063900530400004d07c3002b052a003405c7001d0473004605c700100400
005c05c700100400005c05560029038d003c05560029038d004f031dffec
0239ff88031d00290239ffea063900500400004a063900500400004a05c7
0026038d004605c70026038d004b05c700300473003f05c700300473003f
0473006a031d00510556004a02aa0026046e007002fe001b0639002b0473
004605df002b056900470403004905560021038d001505c700100400005c
05560029038d004f063900500400004a0000feec063900500400004a0639
00500400004a063900500400004a05c7001204000011040000220499005c
049900220473009a038d002e038d00480473004f0473004f038d00300504
004f036b0041036b002f04be002f03a8004a02aaff680469005c0469005c
04bb004a04000013042400130473003b047300460473004602390017027b
002c024d002a0239ffde0239fffe0239002b04db002b06aa003506aa0035
06aa004c0473ff85047300460430002a0400004a0613004a05d9004f05c7
0049038d001f038d001f038d001f038d004b038d004b0335002b0335001f
0499002a0499002a031d0051026bff8502aaff6802cfff4a028eff8502aa
001402aa00260473003f04f000490430002c0400001205c7001504000013
04440013038d0015041b001503ab001b03ab0060038d004a038d004e038d
004a03fb004e063900500452004903a8004904bb004a049c004602aaff75
0473ffed040e00460473004e038d004a038d004e06e3004f06fa004f0771
004f052f0026044b002605a9002606cb004204f9002b04c4002b04190014
03d9003c029a001e029a001e0172ffe20209001e0209000a0221000a02c9
001e0375000a0264000a024000c603f800c602aa009802aa009802aa0098
02aa00ec02aa00ec0203001e0203001e048f0029048f0029048f0062048f
006202aa012102aa00e402aa002602aa012102aa001402aa002602aa00e4
023900a2023900a202aa00ec02aa00ec02aa009902aa009902aa009902aa
001402aaffec030e002d0265000a016b001e01bd001e024a000a0203001e
031000960310009603100096031000960310009602aa006202aa006202aa
001502aa0014040000530457009604570096045700960457009604570043
04570043045700430457004304570043031000430457002f0457002f0457
002f0457002f0457002f0310002f04570025045700250457002504570025
045700250310002f0457001a0457001a0457001a0457001a0457001a0310
001a04570042045700420457004204570042045700420310004204570096
045700960457009604570096045700420457004204570042045700420457
0042031000420457002f0457002f0457002f0457002f0457002f0310002f
0457002f0457002f0457002f0457002f0457002f0310002f045700260457
002604570026045700260457002603100026045700420457004204570042
045700420457004203100042045700960457009604570096045700960457
004204570042045700420457004204570042031000420457002604570026
045700260457002604570026031000260457002304570023045700230457
002304570023031000230457002f0457002f0457002f0457002f0457002f
0310002f0457004b0457004b0457004b0457004b0457004b0310004b0457
009604570096045700960457009604570042045700420457004204570042
04570042031000420457001a0457001a0457001a0457001a0457001a0310
001a0457002404570024045700240457002404570024031000240457002f
0457002f0457002f0457002f0457002f0310002f0457004e0457004e0457
004e0457004e0457004e0310004e04570096045700960457009604570096
0000febd0000fec20000fdef0000fed20000ff6f0000febf0000ff310000
fec00000febd0000ffce0000ff660000fec00000fed20000fed20000ff41
0000ff430000ff43000000000000ff2f0000ff300000ff440000ff440000
fe87000000000000ff940000ff440000ff440000ff440000febf0000feda
000000000000febf0000ff310000ff7a0000ff540000ff3c0000ffce0000
fe870000febb0000febd0000febd0000fed20000fed20000febd0000fec2
0000fdef0000fdef0000febd0000fec20000fdef0000fe160000fee00000
ff940000fe870000ff440000feba0000ff230000ff860000fdef0000fe5f
000000000000feb90000ff430000fe2e0000ff640000fe870000fdef0000
ff660000ff440000feb90000feb90000feb90000ff030000ff440000fd1f
0000ffb70000ffcb0000ff530256001e0212001e016b001e024b001e029a
001e0213001e029c001e029a001e03ef001e0209001e01b2001e0265000a
024a000a02aa00e402aa002602aa00bd0437008a04cb000a05c700120763
000005c7001204fe005005d9000004a3001e063900500400004a05c70051
0360003904e3002e045f004604c3001403b0001e0603000a046f000a06f6
003206aa003705cd005004b0004a05eb0036038d00130500004b04b1004b
0574001e04d8001e05cc0049042000490452001e039a001e04a3001e0400
0049038d004e02aaffc706390050035e0049035e00490556002906390020
038d004f049c00460a01005304f30011061c004a04cd0025080f0029054f
002a05c700100400001308c900290630002a07e9001f05cd000c0ae10029
07fd002a0439000903370000063d000b05810021063900500400004a0686
001004d700130686001004d700130aef00500891004a0697004904af0049
09e40049067600490000fe150a01005304f3001105c70051038d004e02b4
000a0000fea60000febc0000feaa0000fead0000fc2b0000fc4c06390020
049c0046054a0022043b002b04e300340473002705c60029049d00480439
00290337001b05cd0023049c004506a1004a050b0024075f002b05560046
08eb002906c0004605d600510445004e05c70051038d004e0556004a03ee
002506f0004a04df002405df000c04830034070b000004830000070b0000
04830000031d002907e9001f05cd000c05e6002a04bf004705f6000c047d
000c0639002b049c00460639002b049c004605df000c04830034078d0029
0573004902aafff905c700100400005c05c700100400005c0800ffe905c7
005a05560029038d004f05e90050038d003807e9001f05cd000c04390029
0337001b0439002903ab001b06390020049c004606390020049c00460639
00500400004a063900500400004a056d00610375001c05df001204000011
05df00120400001105df00120400001105df000c0483003407db0023063f
004e054a00420473004f06d100420640004f0660006b056d004c04c2006b
03af004c077c000c063c000c07c3002b065900460639005304bb004a05ba
004a04f100250000ff430000fec90000ff770000ffb00000ff470000ff56
0000ff740000fed70000feac000000000000ff520000ff56000000000000
feac0000fd9a000000000000ff6a0000ff7c0000ff690000ff560000feac
0000ff7f0000ff560000fdef0000ff430000ff690000ff7c000000000000
fdae0000ff8c000001020000ff090000ff090000fee00000fee00000ff78
0000ff210000ff0905c700100400005c0556002b0473002b0556002b0473
002b0556002b0473002b05c70051038d004e05c7001b0473004f05c7001b
0473004f05c7001b0473004f05c7001b0473004f05c7001b0473004f0556
0029038d004f05560029038d004f05560029038d004f05560029038d004f
05560029038d004f04e3002e02aa0042063900530400004d0639002b0473
00460639002b047300460639002b047300460639002b047300460639002b
04730046031d00290239ffe2031d00290239ffe20639002e047300440639
002e047300440639002e04730044055600260239002b055600260239ffe7
055600260239ffe6055600260239ffec078d002906aa004c078d002906aa
004c078d002906aa004c05c7001d0473004605c7001d0473004605c7001d
0473004605c7001d04730046063900500400004a063900500400004a0639
00500400004a063900500400004a04e300340473002704e3003404730027
05c70026038d004b05c70026038d004b05c70026038d004b05c70026038d
004b0473006a031d00510473006a031d00510473006a031d00510473006a
031d00380473006a031d00510556004a02aa00260556004a02aa00260556
004a02aa00260556004a02aa002605c700300473003f05c700300473003f
05c700300473003f05c700300473003f05c700300473003f05c700100400
001305c70010040000130800001205c700110800001205c7001105c7000e
0400002f05c7000e0400002f05c700120400001105560021038d00150556
0021038d001505560021038d00150473004602aa001605c7001104000011
0400005c0239000704770057047700570477005704770057047700570477
0057047700570477005705c7001005c70010066700000667000005f90000
05f9000005c7001005c70010036b0041036b0041036b0041036b0041036b
0041036b0041066900000669000007ea000007ea000007ea000007ea0000
048b0012048b0012048b0012048b0012048b0012048b0012048b0012048b
0012074c0000074c000008cd000008cd000008cd000008cd000008cd0015
08cd0015027b002c027b002c027bffd2027bffd2027b0000027b0000027b
ffdf027bffdf043000000430000005b1000005b1000005b1000005b10000
05b1001505b100150400004a0400004a0400004a0400004a0400004a0400
004a0701000507010005087d0000087d000007e7000007e700000427000a
0427000a0427000a0427000a0427000a0427000a0427000a0427000a06ee
0000085b0000085b0000085b001505d9004f05d9004f05d9004f05d9004f
05d9004f05d9004f05d9004f05d9004f0717000007170000089800000898
0000081600000816000008160015081600150477005704770057036b0041
036b0041048b0012048b0012027bfff9027b002c0400004a0400004a0427
000a0427000a05d9004f05d9004f04770057047700570477005704770057
0477005704770057047700570477005705c7001005c70010066700000667
000005f9000005f9000005c7001005c70010048b0012048b0012048b0012
048b0012048b0012048b0012048b0012048b0012074c0000074c000008cd
000008cd000008cd000008cd000008cd001508cd001505d9004f05d9004f
05d9004f05d9004f05d9004f05d9004f05d9004f05d9004f071700000717
000008980000089800000816000008160000081600150816001504770057
04770057047700570477005704770057047700570477005705c7001005c7
001005c7001005c7001005c7001002aa00e102aa00be02aa00e102aa0015
02aa0015048b0012048b0012048b0012048b0012048b001206c0000006d4
000007a3000007c100000639002b02aa000002aa000002aa0015027b0000
027bfff0027bffed027bfff0027bffec027bffeb031d0029031d00290487
000004a5000002aa000002aa000002aa00150427000a0427000a0427000a
0427000a04480065044800650427000a0427000a05c7001205c70012076d
00000777000005f6000002aaff8402aaff8402aa002605d9004f05d9004f
05d9004f05d9004f05d9004f076700000681000007960000069c00000668
004b02aa00e402aa00e10518004905c7005105c7005106aa004c05c7001d
09b50026080000120639002e0556004a08f000290400003004c100660000
ffcb0000ffcb0000ffb70000ffb70239001702aaffc70400ffec04e30034
0473004f023900210473004602e300260555001f0555001f02aa007e02aa
007e02aa00d102aa00d102aa008402aa002602aa000c02aa000302aa000e
02aa00af02aa00a902aa00a902aa00a902aa00a9032e001e032e001e02aa
003a0000ff7b0000ff970000fed20000ff230000ff7b0000ff7b0000feb2
0000ff970000ffcb0000ffcb0000ffcb04e30029047300270426000505a0
000505c7005a045200430430004a049e0046049e004603d500460337001b
0239002a032f001904e8004603df004605730049049c00460400004a0430
00460473004a0473004a0473004a05c70046040300490400004a0400004a
043b004d045400230454002303ee0025045f0046044f004605b50046044f
00460400001305c70011038d0015035d002f03b5004a045a000f03a20048
03e50005049c0046043b004d04cb0004047d000c036a000504c60005032b
001e032b001e0370001e031f001e031f001e03b9001e03c7001e01e5001e
028e001e03d1001e032d001e0495001e0386001e03d4001e039c001e0324
001e02e7001e038e001e0315001e0382001e04c200050256001e0256001e
02b3001e035a001e0298001e029c001e0212001e0212001e0205001e0205
001e025e001e016b001e02b1001e03ef001e0274001e024b001e0213001e
024a001e024a001e029b001e01b2001e029a001e027d001e03ef001f0265
000a029400050256001e02400005025b001e02db001e02460005016b001e
0209001e029a001e0265000a0256001e02400005024b001e02db001e0246
000505ed00460a98004606130046075b00460541ffba01e9001e04540010
0000ff0d0000ff350000fece0000feb70000fec90000ffc70000ff4f0000
ff9e0000fef002be006902be00690376000a0376000a03c0ffba039cffba
03c0ffba039cffba0563002c04e3003d0545003d04be002704a7ffdf0543
004f04e2003805510016048f00280000fe4b0000fe4c0000fe4a0400ffef
04000051046b001c01e0ffba01e0ffb101e0ffba01e0ffba06d0002e0984
00230400000008000000040000000800000002ab00000200000001550000
0400000002000000019a000000ab00000000000005c70051078d00290573
00490602003f0695004f0695004e05c7001005c700510400008005560023
0556004a031d004a038d001504420036000001020000ff420000fe840000
ff3a0000ffcb0448001705c7008705c7005105c700870517002903a20048
0000ff430000ff6b0000ffae028700540000ff3c0298ffba033d001e0000
ff3a0000ff480000ff490000ff7e0000ff4f0000ff4a0000fe9e05320039
05320039022cffb6022cffb60532003c0532003c022cffba022cffba0532
003905320039022cffba022cffba0532003905320039022cffba022cffba
0532003905320039022cffba022cffba0532003905320039022cffba022c
ffba0532003905320039022cffba022cffba049e0034047800300430ffba
0430ffba049e0034047800300430ffba0430ffba02be004f02be004f02be
006902be00690376000a0376000a073200400732004004deffba04deffba
0454003403c000460454ffba02e2ffba0454003403c000460454ffba02e2
ffba0454003403c000460454ffba02e2ffba0610002f0610002f0270ffba
0298ffba0610002f0610002f0270ffba0298ffba060e00290708002902e2
ffba0456ffba060e00290708002902e2ffba0456ffba060e002907080029
02e2ffba0456ffba02e2002102e200210352ffba0352ffba02e2002102e2
00210352ffba0352ffba0454003e0454003e022cffba022cffba0454003e
0454003e022cffba022cffba0454003e0454003e022cffba022cffba039c
0023039c002301e0ffba01e0ffba0376000a0376000a0376000a0376000a
073200400732004004deffba04deffba0473ffe60473004f02aa000f06aa
0016047300070473ffde038dfffc0335ffe8031d000b02aafff2038d0015
0400002502aa001e0427004a06c30026024d0017027b001704730017045f
003504f000170473002b0473004f02aa004204df004d047300440239002b
06aa004c0473004604730027038d004b031d005103a9ff85040000130400
002f038d00150400005c0499005c0473004f038d004f036b0041036b002f
038d00380239002a038d002e02e600000473003f03ab001b02b3001e0213
001e0213001f024b001e0205001e0190001e0190ffa60242001e029a001e
016b0012019b001e016b001e016b001201d60000016b001e016b001e0268
001e03ef001e03ef001f029affaa029a001d0296001e024b001e035b001e
01bd001e016bffba01b2001e029a001e02da001e029a00180279001e0265
000a023d001e023d001e028c001e023e001e025a001e0000fe1e0000fe1e
0000ff730000febc02aa00bf0256001e0212001e024b001e024a000a0212
001e0639005305c700100473002005c7005102aa00320477005704770057
047700570477005704770057047700570477005704770057027bffb0027b
ffd8027bffc4027bffd8027bffc4027bffeb027bffc4027bffeb0427000a
0427000a0427000a0427000a0427000a0427000a0427000a0427000a027b
ffd8027bffd8027bffda027bffda0427000a0427000a0427000a0427000a
03e400220454001a03ba00290556002b05c7003005bc000905560029038d
004f0400001602aaffc7069900510473004e05c70026038d004b05c70012
04000011038d002e038d004e038d002e0239002b0517002303a2002205c7
000e0400002f05c7000e0400002f043900470337003805f6000c047d000c
0000fec60000fed40000fec60000fed40000fe5f0000fe5f0000ff140000
ff7b0000feb20758000503d50046038d002e055600230239001705560026
04e3003405c700260400ffff02aa00000639002b047300460639002e0473
004405560021038d001503ef003e052d002b03de004604fe00500000ff3b
0000ff510000ff080000fef90000fea40000fea40239002a000000000000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c00000242000003140000045c000005ac
0000067e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e0000083e0000083e0000083e
0000083e0000083e0000083e0000083e0000083e0000083e0000083e0000
083e0000083e0000083e0000083e0000083e000100000d3400f2003c008f
000600020010002f00560000084802c40005000200>
<0000005303ea0000000300000000006a00000000000300000001001e006a
0000000300000002000800880000000300000003006c0090000000030000
0004002800fc0000000300000005001e01240000000300000006002c0142
000000030000000700ce016e00000003000000080030023c000000030000
00090086026c000000030000000d029a02f200010000000000000035058c
0001000000000001000f05c10001000000000002000405d0000100000000
0003003605d400010000000000040014060a0001000000000005000f061e
00010000000000060016062d000100000000000700670643000100000000
0008001806aa0001000000000009004306c2000100000000000d014d0705
0003000104030002000e08520003000104030004002e0860000300010405
0002000a088e0003000104050004002a08980003000104060002000608c2
0003000104060004002608c80003000104070002000808ee000300010407
0004002808f60003000104080002000c091e0003000104080004002c092a
0003000104090000006a09560003000104090001001e09c0000300010409
0002000809de0003000104090003006c09e6000300010409000400280a52
0003000104090005001e0a7a0003000104090006002c0a98000300010409
000700ce0ac4000300010409000800300b92000300010409000900860bc2
000300010409000d029a0c4800030001040a0002000e0ee200030001040a
0004002e0ef000030001040b000200120f1e00030001040b000400320f30
00030001040c000200080f6200030001040c000400280f6a00030001040e
000200100f9200030001040e000400300fa2000300010410000200120fd2
000300010410000400320fe4000300010413000200061016000300010413
00040026101c0003000104140002000e10420003000104140004002e1050
00030001041500020014107e000300010415000400341092000300010416
0002000e10c60003000104160004002e10d4000300010419000200141102
00030001041900040034111600030001041b0002000a114a00030001041b
0004002a115400030001041d00020006117e00030001041d000400261184
00030001041f0002000a11aa00030001041f0004002a11b4000300010424
0002000c11de0003000104240004002c11ea00030001042a000200081216
00030001042a00040028121e00030001042d0002000a124600030001042d
0004002a125000030001080a0002000e127a00030001080a0004002e1288
0003000108160002000e12b60003000108160004002e12c4000300010c0a
0002000e12f2000300010c0a0004002e1300000300010c0c00020008132e
000300010c0c00040028133600a900200032003000300036002000540068
00650020004d006f006e006f007400790070006500200043006f00720070
006f0072006100740069006f006e002e00200041006c006c002000520069
0067006800740073002000520065007300650072007600650064002e0054
0069006d006500730020004e0065007700200052006f006d0061006e0042
006f006c0064004d006f006e006f0074007900700065003a00540069006d
006500730020004e0065007700200052006f006d0061006e00200042006f
006c0064003a00560065007200730069006f006e00200035002e00300031
00200028004d006900630072006f0073006f00660074002900540069006d
006500730020004e0065007700200052006f006d0061006e00200042006f
006c006400560065007200730069006f006e00200035002e00300031002e
0033007800540069006d00650073004e006500770052006f006d0061006e
00500053002d0042006f006c0064004d005400540069006d006500730020
004e0065007700200052006f006d0061006e002000690073002000610020
00740072006100640065006d00610072006b0020006f0066002000540068
00650020004d006f006e006f007400790070006500200043006f00720070
006f0072006100740069006f006e00200069006e00200074006800650020
0055006e0069007400650064002000530074006100740065007300200061
006e0064002f006f00720020006f007400680065007200200063006f0075
006e00740072006900650073002e0054006800650020004d006f006e006f
007400790070006500200043006f00720070006f0072006100740069006f
006e004d006f006e006f0074007900700065002000540079007000650020
00440072006100770069006e00670020004f006600660069006300650020
002d0020005300740061006e006c006500790020004d006f007200690073
006f006e002c00200056006900630074006f00720020004c006100720064
0065006e0074002000310039003300320059006f00750020006d00610079
00200075007300650020007400680069007300200066006f006e00740020
006100730020007000650072006d00690074007400650064002000620079
0020007400680065002000450055004c004100200066006f007200200074
00680065002000700072006f006400750063007400200069006e00200077
00680069006300680020007400680069007300200066006f006e00740020
0069007300200069006e0063006c007500640065006400200074006f0020
0064006900730070006c0061007900200061006e00640020007000720069
006e007400200063006f006e00740065006e0074002e002000200059006f
00750020006d006100790020006f006e006c007900200028006900290020
0065006d0062006500640020007400680069007300200066006f006e0074
00200069006e00200063006f006e00740065006e00740020006100730020
007000650072006d00690074007400650064002000620079002000740068
006500200065006d00620065006400640069006e00670020007200650073
007400720069006300740069006f006e007300200069006e0063006c0075
00640065006400200069006e0020007400680069007300200066006f006e
0074003b00200061006e006400200028006900690029002000740065006d
0070006f0072006100720069006c007900200064006f0077006e006c006f
006100640020007400680069007300200066006f006e007400200074006f
002000610020007000720069006e0074006500720020006f00720020006f
00740068006500720020006f007500740070007500740020006400650076
00690063006500200074006f002000680065006c00700020007000720069
006e007400200063006f006e00740065006e0074002ea920323030362054
6865204d6f6e6f7479706520436f72706f726174696f6e2e20416c6c2052
69676874732052657365727665642e54696d6573204e657720526f6d616e
426f6c644d6f6e6f747970653a54696d6573204e657720526f6d616e2042
6f6c643a56657273696f6e20352e303120284d6963726f736f6674295469
6d6573204e657720526f6d616e20426f6c6456657273696f6e20352e3031
2e337854696d65734e6577526f6d616e50532d426f6c644d5454696d6573
204e657720526f6d616e20697320612074726164656d61726b206f662054
6865204d6f6e6f7479706520436f72706f726174696f6e20696e20746865
20556e697465642053746174657320616e642f6f72206f7468657220636f
756e74726965732e546865204d6f6e6f7479706520436f72706f72617469
6f6e4d6f6e6f7479706520547970652044726177696e67204f6666696365
202d205374616e6c6579204d6f7269736f6e2c20566963746f72204c6172
64656e742031393332596f75206d617920757365207468697320666f6e74
206173207065726d6974746564206279207468652045554c4120666f7220
7468652070726f6475637420696e207768696368207468697320666f6e74
20697320696e636c7564656420746f20646973706c617920616e64207072
696e7420636f6e74656e742e2020596f75206d6179206f6e6c7920286929
20656d626564207468697320666f6e7420696e20636f6e74656e74206173
207065726d69747465642062792074686520656d62656464696e67207265
737472696374696f6e7320696e636c7564656420696e207468697320666f
6e743b20616e6420286969292074656d706f726172696c7920646f776e6c
6f6164207468697320666f6e7420746f2061207072696e746572206f7220
6f74686572206f75747075742064657669636520746f2068656c70207072
696e7420636f6e74656e742e004e00650067007200650074006100540069
006d006500730020004e0065007700200052006f006d0061006e0020004e
00650067007200650074006100740075010d006e00e900540069006d0065
00730020004e0065007700200052006f006d0061006e002000740075010d
006e00e900660065006400540069006d006500730020004e006500770020
0052006f006d0061006e0020006600650064004600650074007400540069
006d006500730020004e0065007700200052006f006d0061006e00200046
006500740074038803bd03c403bf03bd03b100540069006d006500730020
004e0065007700200052006f006d0061006e0020038803bd03c403bf03bd
03b100a90020003200300030003600200054006800650020004d006f006e
006f007400790070006500200043006f00720070006f0072006100740069
006f006e002e00200041006c006c00200052006900670068007400730020
00520065007300650072007600650064002e00540069006d006500730020
004e0065007700200052006f006d0061006e0042006f006c0064004d006f
006e006f0074007900700065003a00540069006d006500730020004e0065
007700200052006f006d0061006e00200042006f006c0064003a00560065
007200730069006f006e00200035002e0030003100200028004d00690063
0072006f0073006f00660074002900540069006d006500730020004e0065
007700200052006f006d0061006e00200042006f006c0064005600650072
00730069006f006e00200035002e00300031002e0033007800540069006d
00650073004e006500770052006f006d0061006e00500053002d0042006f
006c0064004d005400540069006d006500730020004e0065007700200052
006f006d0061006e00200069007300200061002000740072006100640065
006d00610072006b0020006f006600200054006800650020004d006f006e
006f007400790070006500200043006f00720070006f0072006100740069
006f006e00200069006e002000740068006500200055006e006900740065
0064002000530074006100740065007300200061006e0064002f006f0072
0020006f007400680065007200200063006f0075006e0074007200690065
0073002e0054006800650020004d006f006e006f00740079007000650020
0043006f00720070006f0072006100740069006f006e004d006f006e006f
007400790070006500200054007900700065002000440072006100770069
006e00670020004f006600660069006300650020002d0020005300740061
006e006c006500790020004d006f007200690073006f006e002c00200056
006900630074006f00720020004c0061007200640065006e007400200031
0039003300320059006f00750020006d0061007900200075007300650020
007400680069007300200066006f006e0074002000610073002000700065
0072006d0069007400740065006400200062007900200074006800650020
00450055004c004100200066006f00720020007400680065002000700072
006f006400750063007400200069006e0020007700680069006300680020
007400680069007300200066006f006e007400200069007300200069006e
0063006c007500640065006400200074006f00200064006900730070006c
0061007900200061006e00640020007000720069006e007400200063006f
006e00740065006e0074002e002000200059006f00750020006d00610079
0020006f006e006c0079002000280069002900200065006d006200650064
0020007400680069007300200066006f006e007400200069006e00200063
006f006e00740065006e00740020006100730020007000650072006d0069
0074007400650064002000620079002000740068006500200065006d0062
0065006400640069006e0067002000720065007300740072006900630074
0069006f006e007300200069006e0063006c007500640065006400200069
006e0020007400680069007300200066006f006e0074003b00200061006e
006400200028006900690029002000740065006d0070006f007200610072
0069006c007900200064006f0077006e006c006f00610064002000740068
0069007300200066006f006e007400200074006f00200061002000700072
0069006e0074006500720020006f00720020006f00740068006500720020
006f00750074007000750074002000640065007600690063006500200074
006f002000680065006c00700020007000720069006e007400200063006f
006e00740065006e0074002e004e00650067007200690074006100540069
006d006500730020004e0065007700200052006f006d0061006e0020004e
006500670072006900740061004c0069006800610076006f006900740075
00540069006d006500730020004e0065007700200052006f006d0061006e
0020004c0069006800610076006f00690074007500470072006100730054
0069006d006500730020004e0065007700200052006f006d0061006e0020
0047007200610073004600e9006c006b00f6007600e9007200540069006d
006500730020004e0065007700200052006f006d0061006e0020004600e9
006c006b00f6007600e9007200470072006100730073006500740074006f
00540069006d006500730020004e0065007700200052006f006d0061006e
002000470072006100730073006500740074006f00560065007400540069
006d006500730020004e0065007700200052006f006d0061006e00200056
0065007400480061006c007600660065007400540069006d006500730020
004e0065007700200052006f006d0061006e002000480061006c00760066
006500740050006f00670072007500620069006f006e006100540069006d
006500730020004e0065007700200052006f006d0061006e00200050006f
00670072007500620069006f006e0061004e00650067007200690074006f
00540069006d006500730020004e0065007700200052006f006d0061006e
0020004e00650067007200690074006f041f043e043b0443043604380440
043d044b043900540069006d006500730020004e0065007700200052006f
006d0061006e0020041f043e043b0443043604380440043d044b04390054
0075010d006e00e900540069006d006500730020004e0065007700200052
006f006d0061006e002000540075010d006e00e900460065007400540069
006d006500730020004e0065007700200052006f006d0061006e00200046
00650074004b0061006c0131006e00540069006d006500730020004e0065
007700200052006f006d0061006e0020004b0061006c0131006e004b0072
00650070006b006f00540069006d006500730020004e0065007700200052
006f006d0061006e0020004b007200650070006b006f011100e20323006d
00540069006d006500730020004e0065007700200052006f006d0061006e
0020011100e20323006d004c006f00640069006100540069006d00650073
0020004e0065007700200052006f006d0061006e0020004c006f00640069
0061004e00650067007200690074006100540069006d006500730020004e
0065007700200052006f006d0061006e0020004e00650067007200690074
0061004e00650067007200690074006f00540069006d006500730020004e
0065007700200052006f006d0061006e0020004e00650067007200690074
006f004e00650067007200690074006100540069006d006500730020004e
0065007700200052006f006d0061006e0020004e00650067007200690074
0061004700720061007300540069006d006500730020004e006500770020
0052006f006d0061006e00200047007200610073b15420b8040cb30c0e32
20b8040cb2131732b8040bb328201f0f41100412008004120002000f0412
003f0412005f04120003005f0412000100400412b2783340b80412b27233
40b80412b26e3340b80412b26a3340b80412b2543340bc0412004a0033ff
c00412b317183240b80412b30a0c3280b80412b308093240b80411b25a33
404109041100560033ffc0041100530033ffc00411b2503340b80411b24d
3340bc041100470033ffc00411b344453240b80411b2423340bc0411003e
0033ffc00411b23a331f4124041100200411004004110070041100af0411
00f004110006000f0411002f04110090041100ff04110004002f04110040
0411007f0411008f041100a0041100e004110006ffc00411b208330f411b
0410008f04100002000f0410001f0410002f0410000300600409000100b0
04090001000f0408003f0408004f0408009f04070004040ab2006c1fb9ff
c00403b345453240b80403b32b2e3240b80403b2282932b9ffc00403b21a
1c32bd040302990027001fffc00401b2161b32b9ffc00400b2424232b9ff
c00400b2363832b9ffc00400b32a2d32df410a040000ef04000002040004
010028001fffc00401b3282e32f0bf0401000103fe000f0101001fffc003
fcb310143240b803fdb30f133240411003f9005003f9000200b003b100c0
03b10002006f03f5007f03f50002ffc003afb22d3132b9ffc003afb30a0e
3210411003ef002003ef008003ef000300a003ef0001002003ef004003ef
0002ffc003efb313163240b803e7b20f1132b9ffc003dfb2303432b9ffc0
03dfb310183250411403dc000103c903d20023001f03e203d2001e001f03
c703d2001d001f03c603c8000d001fffc003a4b30f103280411003a30001
03a303790029001f03a5037a0032001f03a8037e001b001fffc003d9b20e
1132b9ffc003d9b2282a32410a03a7037c0032001f037303710034001f03
6c036bb2321f20bb03a40001004003ecb3090b3240b803ecb2101532bd03
e9036b0014001f03e4036bb2171f0fbd036e002f036e0002ffc003b8b309
0d3290410c03b800a003b80002001f03d20001009f03d20001004003d2b2
090b32410a03a903800016001f03cf03810015001f03aa0382b2151fc0bb
03f70001004003f6b3090d3240b803a2b2083340b803a2b30d0e32c04109
03a2000100b003f200c003f20002ffc003f4b3263832004126038c003003
8c0002002003e3003003e30002001003ee003003ee005003ee006f03ee00
7f03ee009f03ee0006000003ed003003ed0002002f03de007003db009003
db009f03de0004ffc00379b20f1032b9ffc00379b2242832b9037d037cb2
321f10bb037e0001ffc0037eb3090e3240b8037cb2121332b9ffc0037cb3
0c0e323fbd03d7004f03d70002004003d8b31718326fbb038e0001004003
90b3181b3240b803d4b2090c32bd037b037a0032001fffc0037ab20e1132
bd038003820016001f03810382b2151fb0be03820001000f038300010040
03ffb30c11327f411403540001006f0354008f035400d0035400ef035400
04000f0354002f0354005f0354000300400350b30e0f320fbb035a000100
400349b20e331fbd0348007f03480002ffc00348b2152232b9ffc00347b2
152232b9ffc0040fb21b1e32beffc0040f002d01000032040e0406b22f1f
51bb034b0001034f034eb2641f40b80351b20e0f32b9ffc0034eb3383a32
30bb034e0001ffc0034eb21f2332b9ffc0034eb2131932b9ffc00346b209
1132b9ffc00343b30a11320fbb03440001ffc0032bb2080e32b9ffc0032b
b2161b32b9ffc0032ab31417321f4110033a0001000f0333000100000337
0020033700300337008003330004ffc00332b31012325041640332000100
4003320060033200a0033200b00332000400100332003003320050033200
e003320004000f0336007f033600ff033600030070033600f00336000200
0f0331003f0331008f033100bf033100e003310005000f03310060033100
02008f03300001006003300090033000020050032f00010010032f004003
2f0060032f0080032f00a0032f00c0032f00f0032f000700cf032d00ff03
2d00020030032d0080032d00b0032d00df032d0004006f032c007f032c00
020012032000fd0800001f007f0299403a017f007f017f027f037f047f05
7f107f11084035252c32406a252c32402e252c324028252c323760097009
800903300940095009031009200902b8ffc0b2073a33b8ffc04012063a33
da4dea4dfa4d0312379006900702cf410c011100df011100ef0111000300
cf011000df011000ef0110408703cf3edf3eef3e03cf4ddf4def4d03cfde
dfdeefde03cf2ddf2def2d03404d1b3a32375f016f017f018f01041f012f
013f014f01045f036f037f038f03041f032f033f034f0304600b700b800b
03300b400b500b03100b200b02900ba00bb00bc00bd00b05b006c006d006
e006f0060550066006700680069006a006061f072f073f07400604f04143
02db000100a002db00b002db0002008002db009002db0002001002db0001
00c002db00d002db0002009002db0001006002db007002db0002004002db
005002db0002002302db003002db000202db002300a002da0001008002da
009002da0002004002da0001002302da003002da000202da0023000002d9
0001007002d9009002d9000202d9401c2230244024021024202402002401
f02401d024e02402b024c02402c0413a02d8000100a002d800b002d80002
008002d8009002d80002002302d8003002d8000202d8002300c002d70001
00a002d700b002d70002008002d7009002d7000200a002d700b002d70002
008002d7009002d70002006002d7007002d70002004002d7005002d70002
002302d7003002d7000202d7b223370f4117029b0001005f029b009f029b
00df029b0003002f029b003f029b006f029b0003001f029b0001029b029b
0040029ab3272c3280b8029ab2263340b8029ab2223340b8029ab21e3340
b8029ab21c3340b8029ab3191a325f410f029a009f029a00df029a000300
0f029a001f029a003f029a0003ffc00299b2443340b80299b23d3340b802
99b23a33df413702990001005f029900af02990002004f0299009f029900
02002f0299003f0299000200af02990001000f0299003f0299000200b002
9900e0029900020070029900a002990002004f0299005f02990002001f02
99002f0299003f02990003029a029a02990299000f027a002f027a400b02
00161600000012110812b802bab269121fb802b4b228101fb802b3b22810
1fb802b2b228101f411302030023000d01ee0023000d01ae0023000d019f
0023000d01940023000d01570023000d010f400b230df9230dc5230da723
0d410a024a0024000d01f00024000d01e90024000d016a400e240de8240d
c6240da3240da2240dbb01e30022000d0121401a220de5220ddd220db722
0daa220d93220d5c220d51220d4c220d410a02280020000d021d0020000d
015e0020000d011c4017200dfc200de1200dcb200dc8200da1200d59200d
3a200d410a01f20034000d019c0034000d01970034000d0135b7340d1f34
0d1d340dba0202000f015bb20f0009bb0202015b000d030ab22a3e1fb803
09b22a3e1fb80221b24d251fb8021cb24d411fb8021bb24d521fb8021ab2
4d721fb80213b24d931f4109020f01b10401001f020e01b10801001f020c
b22a811fb8020bb22a811fb80208b22a5e1fb80205b22a391fb801feb22a
231fb801fbb2661d1fb801fab2661e1fb801f6b266341fb801f5b266341f
bc01f300660201001f01f1b2669e1f410901ea00280801001f01e7002602
ab001f01b8b24d3f1fb801b7b24d931f410901b4003e0125001f01b20040
0401001f01acb22a721fb801a8b22a281fb801a7b22a241fb801a6b22a24
1fb801a3b22a1f1fb801a1b2662e1fb8019eb266931fb8019db266e41fb8
019ab2286c1f4109019900280401001f019800260401001f0173b24d1b1f
b80171b24d241fb80170b24d2f1fb8016fb24d351fb8016bb23ecd1fb801
69b23ee41f4109016701b1019a001f0166002a02ab001f0161b2662a1fb8
015fb2669e1f4109015d0028019a001f015c00350401001f0147b24d391f
b80146b23ecd1f410d0145003e0125001f014401430101001f014201b102
ab001f0140b22a301fb8013eb22a261fb8013db2661d1fb8013cb2662b1f
b80138b228811fb80137b2289e1fbc01360028019a001f0129b24d721fbc
0124002a0201001f0123b22aab1fb8011fb266291fb8011eb266451fb801
1bb228811f41090113003e0125001f0112003e0401001f0111b22a291fb8
0110b22a201fbe010b0066019a001f010a0026019ab61ffd4d721ffb3eb8
0156b21ffa40b80801b21ff728b80801b61fec4d621feb4db80401b21fea
40b802abb61fdf4d721fde3eb802ab400b1fdc2ae41fdb66221fca2ab804
01401b1fc92a2e1fc326791fb828bb1fb34d1e1fb166291fb066621faf66
b80401b21fae26b802abb21fa828b80201400b1fa0664c1f982a2b1f9726
b8019ab61f9266291f8740b802ab401b1f852a791f8226811f754d931f74
4d891f732a1d1f70285e1f6a28b8040140171f692a521f682a201f676629
1f6566671f612a931f6035b80801b61f5e2acd1f5335b80801b21f4b66b8
0156b21f493eb80801b61f4866521f4626b80201b21f3f66b80156400b1f
3b66341f322a931f2e35bb0401001f002d0143b3cd1f5537bc022f000701
8000070172402e07bd077e076207540742072f072707250721071e071408
120810080e080c080a0808080608040802080008000214b8ffe0402b0000
010014061000000100060400000100041000000100100200000100020000
0001000002010802004a00b013034b024b5342b0372b4bb807ff52b0382b
4bb008505b58b101018e59014bb0c063004b6220b0f65323b8010a515ab0
05234201b0124b004b544218b0382bb00288b801005458b801ffb101018e
851bb0124358b90001012c858d1bb900010146858d59590016763f183f12
3e113946443e113946443e113946443e113946443e11394660443e113946
604445442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b18
2b1db0964b5358b0aa1d59b0324b5358b0ff1d594bb02953205c58b9026c
026a4544b9026b026a45445958b90168026c455258b9026c01684459594b
b03b53205c58b9003e026b4544b9004d026b45445958b9025c003e455258
b9003e025c4459594bb03b53205c58b901b1003e4544b13e3e45445958b9
024f01b1455258b901b1024f4459594bb05a53205c58b90143003e4544b1
3e3e45445958b9038b0143455258b90143038b4459594bb09e53205c58b9
002a026c4544b90040026c45445958b9056c002a455258b9002a056c4459
594bb01853205c58b126264544b1662645445958b13226455258b1263244
59594bb05153205c58b126264544b1282645445958b1ad26455258b126ad
4459594bb8010153205c58b126264544b1352645445958b9022800264552
58b9002602284459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b01b33d766e58456523456023456560234560b08b766818b0
80622020b16e764565234520b003266062636820b003266165b076236544
b06e234420b13d584565234520b003266062636820b003266165b0582365
44b03d2344b10058455458b158406544b23d403d4523614459b34e813871
456523456023456560234560b089766818b080622020b138814565234520
b003266062636820b003266165b081236544b038234420b14e7145652345
20b003266062636820b003266165b071236544b04e2344b10071455458b1
71406544b24e404e45236144594b5242014b5058b108004259435c58b108
004259b3020b0a124358601b2159421610703eb0124358b93b21187e1bba
040001a8000b2b59b00c2342b00d2342b0124358b92d412d411bba040004
00000b2b59b00e2342b00f2342b0124358b9187e3b211bba01a80400000b
2b59b0102342b0112342007418456944456944737373737474757575752b
2b2b73732b2b2b2b2b2b18456944737373742b4544737373737374747445
447374747474747475757545447375454473737474454473737373737474
74740075757575757575757575752b2b74747474747400732b4358b14d4d
451869441bb8ffc0b34d1b3a322b5973002b2b7575752b2b2b2b2b007373
2b435c58b8ffc0b2071633b8ffc0400b061633d54de54df54d03c0410c01
1100d0011100e00111000300c0011000d0011000e00110401e03c03ed03e
e03e03c04dd04de04d03c0ded0dee0de03c02dd02de02d03372b74747474
747473002b2b590173737473747374737473747374752b737573002b2b2b
01732b2b2b2b752b2b2b732b2b2b002b2b742b732b7373742b73732b2b2b
2b2b2b732b732b2b2b742b2b2b73737373732b73732b2b2b73002b2b2b2b
7374732b732b2b2b2b752b2b2b2b2b2b2b2b752b2b2b2b2b732b2b2b2b73
74752b2b7373732b2b2b752b2b732b2b2b2b2b2b2b2b2b2b73747573742b
7374752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7374752b2b2b2b00
000000>
[2111 ] AllocGlyphStorage
]def 
108 44 
PrepFor2015
Type42DictEnd

2 0 3 <> WXMBAA+TimesNewRomanPS-BoldMT AddT42Char 
2 108 19 <0002004affe403b505680016002b014a4019091b061f062509291707181b
1520152518290907080177081db8010ab2120527b8010ab3060d1217b803
0a4025004024263400402b2e34004033363400403b3d3440005000a00003
001a2d120f221f220222b8030a400e8f0d010d401315340d192cf5f1182b
4e10f62b724ded5d43584017224024273422402b2e34224033363422403b
3d346f2201712b2b2b2b594e10f6712b2b2b2b4ded4358b90017ffc0b324
273417b8ffc0b32b2e3417b8ffc0b333363417b8ffc0b53b3d3460170171
2b2b2b2b59003fed3fed313043794062012a20211f2102060f0e100e0206
2423252302060b0c0a0c090c080c040615161416020619181a181b180306
02010301040103062a2b292b02061e1122620026072262001c1317620128
05176201210e1d6201230c27620018161d62012b012762002b2b2b2b012b
2b2b2b2a2a2a2a2a2a2a2a81007101710114070e02232226272627263534
373636333216171605102726272623220706061110171616333237363703
b53922739256629e3d2c212b3e33d07476cd3043fecc040a2619382b1925
1a140f382e32192a0602a6cbb06c8a51645d447199a3ddb999a3a188bbdc
01643b8b31201823b1fdeffee062473020387500>WXMBAA+TimesNewRomanPS-BoldMT AddT42Char 
2 578 20 <0001008700000363056800170083bc000e01ad0135000801a5b6225f076f
070201410d01ad0135000701f90023001601a5000f01f700150135001602
02400e0f08000508070c000f011f010201b8030940100e0e500f6f0faf0f
03100f010f19180ebe0200000802c60018021701df00182b10f6e44e10f4
5d5d3c4d10fd5d3c003f3c3f1239f5edfc01f52b015d2b31300111141616
33331521353332363635113426262322072725029b16464d1ffd3624574a
1a12312033491201f30568fbab7d452c252528468002bf5e2f212024e400
>WXMBAA+TimesNewRomanPS-BoldMT AddT42Char 
2 788 21 <000100320000039c0568001c00e840248802ae02ac0303270c9503020a0b
0a0b0100051b12a016b41602161c020217010a0b081cb80160b6122f17b0
170217b80122b2011208b8ffc0b30b0d3408b80324b40e05010c03b801f4
401b000510050205dc12d30f1c01bf1c011c1a1e0f0101bf010101191dba
0158019000182b4e10e45d7110f65d714df4fd5de4003f3fed2b435c5840
130840160d3f0840170e3f0840190f3f08400d392b2b2b2b5910fd5d435c
58b90017ffc0b3160d3f17b8ffc0b3170e3f17b8ffc0b31b103f17b8ffc0
b21c113f2b2b2b2b59e4113939111239011112395d1139123911393910c9
3130015d005d212135001235342623220727363633321616151407060121
32363637330350fce2016f9d825e9a552536dc9067aa604a65feac01256c
412a22241601b5012e90698b9a0dc0b860a7498589b9feb5122b4500>WXMBAA+TimesNewRomanPS-BoldMT AddT42Char 
2 1116 22 <00010021ffe3038a0568002b00cf401f070f170f682b792b851585169b13
9516a912a616ba130b2d1c3f1c02140801b8019540090000100002000021
0b410901600008002102cc002602ce001a0008ffc0b30d113408b8ffc0b3
12153408b802ceb6400e051a0d0014b80213b4200101050aba0195000b01
1ab61e000510050205b8030ab711d3002910290229b8030a40110f170117
1a2d0f1e011e401315341e192cba0158019000182b4e10e42b7110f6714d
ed5df4ed5d10f4fd11392f191aed3c00183f3f1aed2b2b10fde410e41239
2f5ded12393130015d005d01353e02353426232207273636333216151406
071616151400212227263534363332171616333236353426012f72584079
5a8c622548e18a8db7555b757bfecdfefeac4f39422b211d10c3554a6ac0
02a8232139753c5377940da7a8ac734b8b3539a77ed4fed739283f2e410e
089f755a89e7>WXMBAA+TimesNewRomanPS-BoldMT AddT42Char 
2 1452 23 <00020033000003ad0568000a000d009940183f0d01330101030004020709
0a05080d0c0004080d0d0b0bb8015c40100001140000010b000107080b0d
010400bb01fc0005000a0210400c080105080c0d000810080208bb030900
020007016040182f043f04020f041f0402041a0f004013153400190ef5f1
182b4e10e42b10f65d5d4df43cfd5d3c003f3f10f43cf63c113939011112
391239872e2b047d10c40f0f0f3130015d005d1301331133152311211121
3721113302847a7c7cfeedfe1561018a01ff0369fc97cffed00130cf0217
>WXMBAA+TimesNewRomanPS-BoldMT AddT42Char 
2 0 0 <0002011c0000051c0500000300070042b40201c30607b803084013000504
c303000a0704c3010019080605c30203bc014100090125015600182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
011c0400fc2003c0fc400500fb002004c000>WXMBAA+TimesNewRomanPS-BoldMT AddT42Char 
WXMBAA+TimesNewRomanPS-BoldMT /CharStrings get begin
/space 3 def
/zero 19 def
/one 20 def
/two 21 def
/three 22 def
/four 23 def
end
WXMBAA+TimesNewRomanPS-BoldMT /Encoding get
dup 32 /space put
dup 48 /zero put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
pop
end
%ADOEndSubsetFont
/INAMQC+TimesNewRomanPS-BoldMT /WXMBAA+TimesNewRomanPS-BoldMT findfont ct_VMDictPut
/INAMQC+TimesNewRomanPS-BoldMT*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
203{/.notdef}rp]
INAMQC+TimesNewRomanPS-BoldMT nf
INAMQC+TimesNewRomanPS-BoldMT*1 [14.4 0 0 -14.4 0 0 ]msf
45.0599 272.035 mo
(0)sh
52.2599 272.035 mo
( )sh
73.8599 272.035 mo
(1)sh
81.0599 272.035 mo
( )sh
102.66 272.035 mo
(2)sh
109.86 272.035 mo
( )sh
131.46 272.035 mo
(3)sh
138.66 272.035 mo
( )sh
160.26 272.035 mo
(4)sh
167.46 272.035 mo
( )sh
30.6599 228.835 mo
(1)sh
37.8599 228.835 mo
( )sh
30.6599 200.035 mo
(2)sh
37.8599 200.035 mo
( )sh
30.6599 171.235 mo
(3)sh
37.8599 171.235 mo
( )sh
30.6599 142.435 mo
(4)sh
37.8599 142.435 mo
( )sh
INAMPZ+*1 [15.264 0 0 -15.264 0 0 ]msf
237.671 272.035 mo
(")sh
INAMQB+*1 [10.7856 0 0 -10.7856 0 0 ]msf
243.611 274.195 mo
(")sh
251.396 274.195 mo
(#)sh
256.796 274.195 mo
($)sh
%ADOBeginSubsetFont: WXMBAA+TimesNewRomanPS-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal INAMQC+TimesNewRomanPS-BoldMT gcheck setglobal} if
2 1662 24 <00010045ffe403b3054c00220150402e0e0601090a190a2800280304140a
151b151c0338064906b705030b05011a1b0a1c041d101b0a1c1d04011a04
0303b8015c4010002214000022120f2201002210220222b80309b4120004
0104b801efb6122003bf030203b80122b30100041ab8019a400a0f131f13
0213dc0c0d02b802c8b301d10800bb02060022001d01f5401a40085008a0
0803081a2410d18f22012240131534221923f5f1182b4e10f42b724de410
f671ed10e410f4e4003fed5ded3f3cfd5d435c58401403401c113f03401b
103f0340170e3f0340160d3f2b2b2b2b59fe71435c58b90004ffc0b31c11
3f04b8ffc0b31b103f04b8ffc0b3170e3f04b8ffc0b3160d3f04b8ffc0b2
140c3f2b2b2b2b2b59ed5d71435c58401e22401c113f22401b103f224017
0e3f2240160d3f2240140c3f2240120b3f2b2b2b2b2b2b5987052e2b7d10
c400111217390111121739313000715d01725d7101210321070417161514
060423222726353436333216171617163332363534242122070138027b65
fdea330159ba998efefe9aa6593e412b2750613d2c1f275273fea0fef41b
36054cfefe870d9f83c37def813e2c382b4220442a100c7854b0dc01>INAMQC+TimesNewRomanPS-BoldMT AddT42Char 
INAMQC+TimesNewRomanPS-BoldMT /CharStrings get begin
/five 24 def
end
INAMQC+TimesNewRomanPS-BoldMT /Encoding get
dup 53 /five put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/INAMQC+TimesNewRomanPS-BoldMT*1 
[32{/.notdef}rp /space 15{/.notdef}rp /zero /one /two /three /four 
/five 202{/.notdef}rp]
INAMQC+TimesNewRomanPS-BoldMT nf
INAMQC+TimesNewRomanPS-BoldMT*1 [14.4 0 0 -14.4 0 0 ]msf
189.06 272.035 mo
(5)sh
196.26 272.035 mo
( )sh
30.6599 113.635 mo
(5)sh
37.8599 113.635 mo
( )sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/INAMQB+*1 uf
/INAMQB+ uf
/ uf
/INAMPZ+*1 uf
/INAMPZ+ uf
/ uf
/INAMPV+*1 uf
/INAMPV+ uf
/ uf
/INAMQC+TimesNewRomanPS-BoldMT*1 uf
/INAMQC+TimesNewRomanPS-BoldMT uf
/WXMBAA+TimesNewRomanPS-BoldMT uf
/INAMPX+*1 uf
/INAMPX+ uf
/ uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
